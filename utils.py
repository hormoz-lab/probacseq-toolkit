import os
import h5py
import numpy as np
import gzip
import scipy.io
from scipy import sparse
import shutil
from scipy.sparse import csr_matrix




def parse_construct_sequence(construct_sequence_file):
    construct_sequence = {}
    with open(construct_sequence_file, "r") as file:
        line = next(file).strip()
        if line in [">R1", ">R2"]:
            read = line[1:]
            construct_sequence[read] = []
            seq = next(file).strip()

            segment = None
            region = None
            for nuc in seq:
                if nuc in ["A","T","G","C", "N"]:
                    r = "anchor"
                elif nuc == "M":
                    r = "sample_identifier"
                elif nuc == "U":
                    r = "UMI"
                elif nuc == "P":
                    r = "probe"
                else:
                    raise ValueError("Unidentified character %s" %nuc)

                if region != r:
                    if segment:
                        construct_sequence[read].append((segment,region))
                    segment = ""
                    region = r
                segment += nuc
    construct_sequence[read].append((segment,region))
    return construct_sequence




def load_10x_h5_matrix(h5_file):

    assert os.path.isfile(h5_file), \
        'Invalid path to 10x counts file'
    print(f'Loading 10x counts matrix: {h5_file}')

    file = h5py.File(h5_file, 'r')

    prefix = list(file.keys())[0]
    dataset = file.get(prefix)
    data = np.array(dataset.get('data'), dtype=np.double)
    rowptr = np.array(dataset.get('indptr'))
    column = np.array(dataset.get('indices'))
    shape = np.array(dataset.get('shape'))
    shape = np.flipud(shape).T

    row = np.repeat(range(shape[0]), np.diff(rowptr))

    counts = csr_matrix((data, (row, column)), shape=tuple(shape))

    barcodes = np.array(dataset.get('barcodes'))
    barcodes = np.char.rstrip(barcodes, b'-1')

    """
    The H5 files should come with provenance about which version of the
    software generated them, but they don't, so I'm using this as the
    switch based on manual inspection of the file structure generated by
    Version 2.1 vs 3.x (and above) of the software.
    """
    for v in dataset.values():
        # CellRanger 2.1
        if isinstance(v, h5py.Group):
            features = np.array(v.get('name'))
            break
    else:
        # CellRanger 3.x (and above)
        features = np.array(dataset.get('gene_names'))
    features = np.char.strip(features)

    assert counts.shape[0] == len(barcodes), \
        'Number of barcodes and rows in count matrix do not match'
    assert counts.shape[1] == len(features), \
        'Number of features and columns in count matrix do not match'

    return counts, barcodes, features




def parse_molecule_info(h5_file, CBs, N_genes):

    assert os.path.isfile(h5_file), \
        'Invalid path to molecule_info file'

    file = h5py.File(h5_file, 'r')

    barcode_list = np.array(file.get('barcodes'))
    barcode_mask = np.array([
        np.where(CBs == item)[0][0] if found else -1
        for (item, found) in zip(barcode_list, np.in1d(barcode_list, CBs))
    ])
    #del barcode_list

    barcode_id = np.array(file.get('barcode_idx'))
    barcode_mask = barcode_mask[barcode_id]
    barcode_id = barcode_mask[barcode_mask >= 0]
    barcode_mask = (barcode_mask + 1).astype(bool)

    reads = np.array(file.get('count'))
    reads = reads[barcode_mask]

    gene_id = np.array(file.get('feature_idx'))
    gene_id = gene_id[barcode_mask]

    umis = np.array(file.get('umi'))
    umis, umi_id = np.unique(umis[barcode_mask], return_inverse=True)

    assert len(np.unique(np.vstack((barcode_id, umi_id)).T, axis=0)) \
        == len(gene_id)

    umi_counts = np.zeros(shape=(len(CBs), N_genes), dtype=np.int)
    read_counts = np.zeros(shape=(len(CBs), N_genes), dtype=np.double)
    indices = np.vstack((barcode_id, gene_id))
    np.add.at(umi_counts, tuple(indices), 1)
    np.add.at(read_counts, tuple(indices), reads)

    out = {
        'barcode_id': barcode_id,
        'read': reads,
        'gene_id': gene_id,
        'umis': umis,
        'umi_id': umi_id,
        'umi_counts': csr_matrix(umi_counts),
        'read_counts': csr_matrix(read_counts),
    }

    return out




def save_bargraph(mat, outdir):

    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D
    from matplotlib import cm

    lx, ly = mat.shape
    xpos = np.arange(0, lx, 1)
    ypos = np.arange(0, ly, 1)
    xpos, ypos = np.meshgrid(xpos, ypos)

    values = np.linspace(0, 1., xpos.ravel().shape[0])
    colors = cm.viridis(values)

    xpos = xpos.flatten()
    ypos = ypos.flatten()
    zpos = np.zeros(lx*ly)
    dx = 0.5 * np.ones_like(zpos)
    dy = dx.copy()
    dz = mat.flatten()

    fig = plt.figure(figsize=(8, 8))
    ax = Axes3D(fig)

    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors)
    ax.set_xlabel('Probe Umi Count', fontsize=14)
    ax.set_ylabel('10X Umi Count', fontsize=14)
    ax.set_zlabel('# of (CB,Probe) Entries with UMI Count', fontsize=14)
    ax.set_title('Count Matrix Coincidence Analysis', fontsize=16)
    fig.set_tight_layout(True)

    plt.savefig(f'{outdir}/coincidence_analysis.png',
                bbox_inches='tight', dpi=300)


    
    
def batch_iterator(iterator, batch_size):
    entry = True  # Make sure we loop once
    while entry:
        batch = []
        while len(batch) < batch_size:
            try:
                entry = next(iterator)
            except StopIteration:
                entry = None
            if entry is None:
                # End of file
                break
            batch.append(entry)
        if batch:
            yield batch

            
            
            
def write_files(outdir, gene_count_matrix, barcodes, genes, gene_symbol={}):
    prefix = os.path.join(outdir)
    os.makedirs(prefix, exist_ok=True)
    gene_count_matrix = sparse.csr_matrix(gene_count_matrix) 
    scipy.io.mmwrite(os.path.join(prefix,'matrix.mtx'),gene_count_matrix)
    with gzip.open(os.path.join(prefix,'barcodes.tsv.gz'), 'wt') as barcode_file:
        for b in barcodes:
            barcode_file.write(b+"\n")
    with gzip.open(os.path.join(prefix,'features.tsv.gz'), 'wt') as feature_file:
        for gene in genes:
            if gene in gene_symbol:
                feature_file.write("\t".join([gene,gene_symbol[gene],'Gene Expression'])+"\n")
            else:
                feature_file.write("\t".join([gene,gene,'Gene Expression'])+"\n")
#             feature_file.write('{}\n'.format(feature).encode())
    with open(os.path.join(prefix,'matrix.mtx'),'rb') as mtx_in:
        with gzip.open(os.path.join(prefix,'matrix.mtx') + '.gz','wb') as mtx_gz:
            shutil.copyfileobj(mtx_in, mtx_gz)
    os.remove(os.path.join(prefix,'matrix.mtx')) 
    
    